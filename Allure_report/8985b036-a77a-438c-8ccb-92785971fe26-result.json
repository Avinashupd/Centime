{"name": "test_get_record", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@sleep_and_retry\n    @limits(calls=5, period=min_time)\n    def test_get_record():\n        wb = openpyxl.load_workbook(\"F:\\\\centime\\\\centime - Copy.xlsx\")\n        sheet = wb.active\n        response_dict = {}\n        for r in sheet.iter_rows(min_row=3, min_col=2, max_col=7, values_only=True):\n            response_dict = {\n                \"function\": r[1],\n                \"symbol\": r[2],\n                \"outputsize\": r[3],\n                \"datatype\": r[4],\n                \"apikey\": r[5]\n            }\n    \n            getRecord = requests.get(url, params=response_dict)\n>           getRecord_response = getRecord.json()\n\ntest_dailyapi.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\users\\avinash\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\requests\\models.py:889: in json\n    return complexjson.loads(\nc:\\users\\avinash\\appdata\\local\\programs\\python\\python38-32\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nc:\\users\\avinash\\appdata\\local\\programs\\python\\python38-32\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x03FE6898>\ns = 'timestamp,open,high,low,close,volume\\r\\n2020-12-24,131.3200,133.4600,131.1000,131.9700,54930064\\r\\n2020-12-23,132.160...2020-08-06,441.6200,457.6500,439.1900,455.6100,50607225\\r\\n2020-08-05,437.5100,441.5700,435.5900,440.2500,30497988\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nc:\\users\\avinash\\appdata\\local\\programs\\python\\python38-32\\lib\\json\\decoder.py:355: JSONDecodeError"}, "attachments": [{"name": "stdout", "source": "16960927-e9e3-4418-9f66-03550b443fa5-attachment.txt", "type": "text/plain"}], "start": 1608962930841, "stop": 1608962944573, "uuid": "f047789d-5092-40bc-8e1f-f240bda25fd4", "historyId": "cc632c3287b4c1927451095d3dcb843b", "testCaseId": "20cdb908d711ef587b9f777d6c5fc8a8", "fullName": "test_dailyapi#test_get_record", "labels": [{"name": "suite", "value": "test_dailyapi"}, {"name": "host", "value": "Avinash"}, {"name": "thread", "value": "5880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_dailyapi"}]}